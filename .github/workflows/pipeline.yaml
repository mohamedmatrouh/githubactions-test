name: Pipeline

on:
  push:
    branches: [ prod ]
  pull_request:
    branches: [ prod ]

jobs:
  ci-pipeline:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: ðŸ”§ Setup
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven

      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.3
        with:
          maven-version: 3.8.5

      - name: Set Release version env variable
        run: |
          echo "RELEASE_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('./pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

  build_and_push_image:
    name: Publish to registry
    runs-on: ubuntu-latest
    needs: ci-pipeline
    env:
      IMAGE_NAME: index.docker.io/mohamedmatrouh/test-action
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: ðŸ”§ Setup
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.3
        with:
          maven-version: 3.8.5

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set release version environment variable
        run: |
          RELEASE_VERSION=0.0.1.SNAPSHOT
          echo "RELEASE_VERSION=$RELEASE_VERSION-$GITHUB_SHA" >> $GITHUB_ENV

      - name: ðŸ“¦ Build Docker Images
        run: mvn package jib:build -am -DskipTests
        env:
          REGISTRY_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          REGISTRY_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
          IMAGE_TAG: ${{ env.RELEASE_VERSION }}
          IMAGE_NAME: ${{env.IMAGE_NAME}}
      - name: pass docker image name and tag to next job
        id: output
        run: |
          echo "::set-output name=image-name::$IMAGE_NAME"
          echo "::set-output name=image-tag::$RELEASE_VERSION"

  update-gitops-repo:
    needs: build_and_push_image
    name: update git repository
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{needs.build_and_push_image.outputs.image-name}}
      IMAGE_TAG: ${{needs.build_and_push_image.outputs.image-tag}}
    steps:
      - run: echo "needs.job1.outputs.output1 ${{needs.build_and_push_image.outputs.image-tag}} needs.job1.outputs.output2 ${{needs.build.build_and_push_image.outputs.image-tag}}"
      - uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY }}

      - uses: imranismail/setup-kustomize@v1
        with:
          kustomize-version: '3.9.4'


      - name: update image campus home
        run: |
          git clone git@github.com:mohamedmatrouh/gitops-test.git /tmp/gitops-test
          cd /tmp/catalogue-gitops/workloads/apps/catalogue/overlays/dev
          kustomize edit set image $IMAGE_NAME=$IMAGE_NAME:$IMAGE_TAG
          cd /tmp//gitops-test
          git version
          git status
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -a -m "[GitHub Action] Set $GITHUB_BASE_REF frontend image tag to $IMAGE_TAG"
          git push
          cd /tmp
          rm -rf /gitops-test
